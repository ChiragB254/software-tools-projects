{"ast":null,"code":"import React,{useState,useEffect}from\"react\";import\"./App.css\";// Weather Service component\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const WeatherService=_ref=>{let{onWeatherData}=_ref;const API_KEY=\"eb55320dc2bc69f4780d5acb18612ca2\";// Replace with your actual API key\nconst CITY=\"Toronto\";const COUNTRY_CODE=\"CA\";useEffect(()=>{const fetchWeather=async()=>{try{const response=await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${CITY},${COUNTRY_CODE}&units=metric&appid=${API_KEY}`);if(!response.ok){throw new Error(\"Weather data not available\");}const data=await response.json();onWeatherData(data);}catch(error){console.error(\"Error fetching weather:\",error);onWeatherData({main:{temp:\"N/A\"}});}};fetchWeather();// Refresh weather data every 10 minutes\nconst weatherInterval=setInterval(fetchWeather,600000);return()=>clearInterval(weatherInterval);},[onWeatherData]);return null;// This is a service component, no UI needed\n};// Toronto DateTime component - Fixed version\nconst TorontoDateTime=()=>{const[torontoTime,setTorontoTime]=useState(\"\");useEffect(()=>{const updateTorontoTime=()=>{const now=new Date();// Format as Toronto time (Eastern Time)\nconst formatter=new Intl.DateTimeFormat(\"en-US\",{timeZone:\"America/Toronto\",year:\"numeric\",month:\"2-digit\",day:\"2-digit\",hour:\"2-digit\",minute:\"2-digit\",second:\"2-digit\",hour12:false});const parts=formatter.formatToParts(now);const partValues={};// Extract all parts into an object for easy access\nparts.forEach(part=>{partValues[part.type]=part.value;});// Create formatted string YYYY-MM-DD HH:MM:SS\nconst formattedDate=`${partValues.year}-${partValues.month}-${partValues.day} ${partValues.hour}:${partValues.minute}:${partValues.second}`;setTorontoTime(formattedDate);};// Initial update\nupdateTorontoTime();// Update every second\nconst interval=setInterval(updateTorontoTime,1000);return()=>clearInterval(interval);},[]);return/*#__PURE__*/_jsxs(\"div\",{className:\"date-time\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Current Toronto Date and Time:\"}),/*#__PURE__*/_jsx(\"p\",{children:torontoTime})]});};// Main App component\nfunction App(){const[weatherData,setWeatherData]=useState(null);const handleWeatherData=data=>{setWeatherData(data);};return/*#__PURE__*/_jsx(\"div\",{className:\"App\",children:/*#__PURE__*/_jsxs(\"header\",{className:\"App-header\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Toronto Date, Time and Weather\"}),/*#__PURE__*/_jsx(TorontoDateTime,{}),/*#__PURE__*/_jsx(WeatherService,{onWeatherData:handleWeatherData}),/*#__PURE__*/_jsxs(\"div\",{className:\"weather\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Current Toronto Temperature:\"}),weatherData?/*#__PURE__*/_jsxs(\"p\",{children:[weatherData.main.temp,\"\\xB0C\"]}):/*#__PURE__*/_jsx(\"p\",{children:\"Loading weather data...\"})]})]})});}export default App;","map":{"version":3,"names":["React","useState","useEffect","jsx","_jsx","jsxs","_jsxs","WeatherService","_ref","onWeatherData","API_KEY","CITY","COUNTRY_CODE","fetchWeather","response","fetch","ok","Error","data","json","error","console","main","temp","weatherInterval","setInterval","clearInterval","TorontoDateTime","torontoTime","setTorontoTime","updateTorontoTime","now","Date","formatter","Intl","DateTimeFormat","timeZone","year","month","day","hour","minute","second","hour12","parts","formatToParts","partValues","forEach","part","type","value","formattedDate","interval","className","children","App","weatherData","setWeatherData","handleWeatherData"],"sources":["/Users/chirag/Data/Class/software-tools-projects-main/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\n\n// Weather Service component\nconst WeatherService = ({ onWeatherData }) => {\n  const API_KEY = \"eb55320dc2bc69f4780d5acb18612ca2\"; // Replace with your actual API key\n  const CITY = \"Toronto\";\n  const COUNTRY_CODE = \"CA\";\n\n  useEffect(() => {\n    const fetchWeather = async () => {\n      try {\n        const response = await fetch(\n          `https://api.openweathermap.org/data/2.5/weather?q=${CITY},${COUNTRY_CODE}&units=metric&appid=${API_KEY}`\n        );\n\n        if (!response.ok) {\n          throw new Error(\"Weather data not available\");\n        }\n\n        const data = await response.json();\n        onWeatherData(data);\n      } catch (error) {\n        console.error(\"Error fetching weather:\", error);\n        onWeatherData({ main: { temp: \"N/A\" } });\n      }\n    };\n\n    fetchWeather();\n\n    // Refresh weather data every 10 minutes\n    const weatherInterval = setInterval(fetchWeather, 600000);\n    return () => clearInterval(weatherInterval);\n  }, [onWeatherData]);\n\n  return null; // This is a service component, no UI needed\n};\n\n// Toronto DateTime component - Fixed version\nconst TorontoDateTime = () => {\n  const [torontoTime, setTorontoTime] = useState(\"\");\n\n  useEffect(() => {\n    const updateTorontoTime = () => {\n      const now = new Date();\n\n      // Format as Toronto time (Eastern Time)\n      const formatter = new Intl.DateTimeFormat(\"en-US\", {\n        timeZone: \"America/Toronto\",\n        year: \"numeric\",\n        month: \"2-digit\",\n        day: \"2-digit\",\n        hour: \"2-digit\",\n        minute: \"2-digit\",\n        second: \"2-digit\",\n        hour12: false,\n      });\n\n      const parts = formatter.formatToParts(now);\n      const partValues = {};\n\n      // Extract all parts into an object for easy access\n      parts.forEach((part) => {\n        partValues[part.type] = part.value;\n      });\n\n      // Create formatted string YYYY-MM-DD HH:MM:SS\n      const formattedDate = `${partValues.year}-${partValues.month}-${partValues.day} ${partValues.hour}:${partValues.minute}:${partValues.second}`;\n\n      setTorontoTime(formattedDate);\n    };\n\n    // Initial update\n    updateTorontoTime();\n\n    // Update every second\n    const interval = setInterval(updateTorontoTime, 1000);\n    return () => clearInterval(interval);\n  }, []);\n\n  return (\n    <div className=\"date-time\">\n      <h2>Current Toronto Date and Time:</h2>\n      <p>{torontoTime}</p>\n    </div>\n  );\n};\n\n// Main App component\nfunction App() {\n  const [weatherData, setWeatherData] = useState(null);\n\n  const handleWeatherData = (data) => {\n    setWeatherData(data);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Toronto Date, Time and Weather</h1>\n\n        {/* Toronto date and time component */}\n        <TorontoDateTime />\n\n        {/* Weather service (non-visual component) */}\n        <WeatherService onWeatherData={handleWeatherData} />\n\n        {/* Weather display */}\n        <div className=\"weather\">\n          <h2>Current Toronto Temperature:</h2>\n          {weatherData ? (\n            <p>{weatherData.main.temp}Â°C</p>\n          ) : (\n            <p>Loading weather data...</p>\n          )}\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}